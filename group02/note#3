# 객체지향프로그램 4주차 정리노트

<202184032 안신영, 202184022 박찬윤>

<박찬윤> → 실습자

1 .  클래스 변수 선언이 헷갈렸다, 함수도 선언해야하는 것, 구현하는 것까지 헷갈렸다.

2 .  실습 2를 정확하게 만들지 못하였다. → 생성자를 클래스 안에 선언해야하는데 조건 설정이 헷갈렸다.

3 . 

<안신영> → 작성자

1 . 객체 선언까지는 이해를 했는데 클래스 구현하는데 있어서 클래스를 정확한 구현의 구조이해를 헷갈렸다.

2 . public: 이 기본적으로 들어가는지 교수님이 설명해주셔서 알게되었다. 

3 . 실습2를 정확하게 만들지 못하였다. → 객체를 3개를 생성하였지만 클래스 내에서 선언하고 조건 설정이 어려웠음

4 . 반지름이 1000, 20000, 100, 200, 30 순서 일 것 같다. → 틀림 , Donut이 1인 것을 생각을 못함

<실습1>

```cpp
#include <iostream>
using namespace std;
class Recangle {
public:
int width;
int height;
int getArea();
};
int Recangle::getArea(){
return width * height;
```

```cpp
}
int main(){
Recangle rect;
rect.width = 3;
rect.height = 5;
cout << "사각형의 넓이는 " << rect.getArea() << endl;
)
```

<실습2>

```cpp
#include <iostream>
using namespace std;
class Rectangle {
public:
int width;
int height;
}
Rectangle::Rectangle() {
width = height = 1
}
Rectangle::Rectangle(){
}
int main(){
Rectangle rect1;
Rectangle rect2 (3, 5);
Rectangle rect3 (3);
```

```cpp
if (rect1.isSquare()) cout << "rect1는 정사각형이다" << endl;
if (rect2.isSquare()) cout << "rect2는 정사각형이다" << endl;
if (rect3.isSquare()) cout << "rect3는 정사각형이다" << endl;
}
```

<질문>

1 . 세상의 모든 것들이 객체라고 하는데 왜 객체인 것인가?

→ 하나의 물체로 만들어진 것들이 객체인것 같다.

2 . 객체는 상태를 따로 분리 할 수 있는 것인가?

→ 인터넷에서 찾아봄

- 객체지향이란 **"시스템"을 상호작용하는 자율적인 객체들의 "공동체"**로 바라보고 **"객체"를 이용해 시스템을 "분할"하는 방법**입니다.
- **"자율적인 객체"란 "상태"와 "행위"를 함께 지니며 스스로 "자기 자신을 책임"지는 객체를 의미**합니다.
- **"객체"는 "시스템의 행위를 구현"하기 위해 "다른 객체와 협력"합니다.**각 객체는 "협력" 내에서 "정해진 역할을 수행"하며 "역할"은 "관련된 책임의 집합"입니다.
- 객체는 **다른 객체와 협력하기 위해 메시지를 "전송"**하고, **메시지를 수신한 객체는 메시지를 처리하는 데 적합한 메서드를 자율적으로 "선택"**한다.
- **객체지향의 핵심은 클래스가 아닙니다**. **적절한 책임을 수행하는 역할 간의 유연하고 견고한 협력 관계를 구축하는 것입니다.** **클래스들의 정적인 관계가 아니라 메시지를 주고받는 객체들의 동적인 관계가 상대적으로 더 중요합니다.**
- 지나치게 클래스를 강조하는 관점은 객체의 캡슐화를 저해하고 클래스를 서로 강하게 결합시키기 때문에 유연하고 확장 가능한 애플리케이션의 구축을 방해합니다.

3 . 왜 클래스하고 객체를 따로 분리할까?

→ 클래스를 큰 틀을 해놓으니까 추가해서 변형해서 쓸 수 있는 객체로 만들기때문에?

4 . 위임생성자가 왜 필요한가?

→ 객체 생성자를 초기화는데 위임하려고 만든거 아닌가?

→ 여러 개의 생성자가 있으면 모양이 똑같으니까 코드의 반복을 막기 위해 필요한 객체를 위임하기 위해서 

5 .  클래스에서 객체를 조건하는 것이 왜 어려웠을까 ?

→ 간단하게 했었야했는데 함수를 좀 더 복잡하게 생각했던 것 같다.

<정리>

세상의 모든 것들이 객체다. 객체지향이라는 것은 메세지나 커뮤니케이션을 한다?

객체에서 중요한 것은 캡슐화다 

→ 캡슐로 감싸서 내부에서 접근을 제한하기 위해서 볼 수 없게 함

객체는 상태를 따로 분리 할 수 있는 것인가?

멤버 함수로 구성이 되어있다. 실제 클래스가 아니라 실제적인 데이터들이 들어가 있다.

(클래스와 객체의 차이)

클래스: 설계도, 클래스로 모든 것을 정의한다.

객체: 특징을 가지고 있는 것들이 실체가 객체다.

선언을 하고 구현부 

→ 클래스 : return 타입이 있고, 클래스 안에 내가 속하는지 네임 스페이스?

공간의 참조 

c++ → public: 을 지정해줘야 에러가 나지않는다. 기본적으로 해야한다.

(생성자)

 → 객체를 생성하고, 객체를 생성하는데 있어서 처음으로 호출해서 함수이다.

→ 객체를 생성하는데 초기화를 한다. 

→ 이름 동일하게 만들고, 리턴 타입은 선언하지 않는다. 

→ 한번만 자동으로 호출한다.

→ 중복가능

(위임생성자)

→ 매개변수한테 위임을 한다?

→ 코드의 간소화가 된다.
