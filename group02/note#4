# 객체지향 정리노트 9주차

<박찬윤, 안신영>

(프렌드와 연산자 중복)

<질문>

정확한 프렌드란 ?

→ 프렌드라는 키워드를 선언만 하는 것인가 갯수는 제한이 없다.

<질문2>

일부 함수를 지웠을 때랑 , 프렌드 함수를 지웠을 때의 차이

→ 프렌드 함수의 제거:

- 프렌드 함수는 클래스의 프렌드 목록에서 제거하면 해당 함수는 더 이상 클래스의 프렌드가 아니며 클래스의 비공개 멤버에 접근할 수 없습니다.
- 프렌드 함수의 제거는 해당 함수의 선언과 정의를 클래스 정의에서 완전히 삭제하거나 주석 처리하여 수행됩니다.

→ 멤버 함수의 제거:

- 클래스의 멤버 함수를 제거하면 해당 함수는 더 이상 클래스의 일부가 아니며 호출할 수 없습니다.
- 클래스 인스턴스를 생성하더라도 해당 함수를 호출할 수 없습니다.
- 상속 관계에 있는 파생 클래스에서도 해당 함수를 오버라이드하거나 호출할 수 없습니다.
- 일반적으로 제거된 멤버 함수를 클래스 정의에서 완전히 삭제하거나 주석 처리합니다.

<질문3>

두 개의 power객체를 더하는 + 연산자 작성을 이해를 하지못함

→ 두 개의 Power 객체를 더하는 + 연산자를 작성하려면 Python에서 클래스에 **`__add__`** 메서드를 추가해야 합니다. **`__add__`** 메서드를 구현함으로써 두 객체를 더할 수 있게 됩니다. 아래는 이를 어떻게 수행하는지에 대한 설명입니다:

1. 클래스 정의: Power 객체를 나타내는 클래스를 정의합니다.
2. **`__init__`** 메서드: 클래스에 **`__init__`** 메서드를 추가하여 객체를 초기화합니다.
3. **`__add__`** 메서드: **`__add__`** 메서드를 정의하여 두 Power 객체를 더하는 연산을 처리합니다. 이 메서드는 다음과 같은 형태를 갖습니다:

<정리>

나의 멤버함수가 아닌 것에서 프라이빗 데이터에 접근을 할 수 있는 경우가 있는데 프라이빗의 데이터를 접근 할 수 있게 하는게 프렌드다.

프렌드로 선언 순간 외부 클래스에서도 프라이빗으로 접근을 할 수 있다.

중요!! → 프렌드로 초대하는 3가지 유형

- 전역 함수: 클래스 외부에 선언된 전역함수
- 다른 클래스의 멤버 함수: 다른 클래스의 특정 멤버 함수
- 다른 클래스 전체: 다른 클래스의 모든 멤버 함수

연산자 중복에서 클래스 옆에 Power& 으로 붙어있는 경우는 그 생성된 객체에 직접 값을 넣는 방식이고

옆에&을 빼도 값 자체는 같게 나오지만 주소로 보면 다른주소에 새로 생성되어서 들어간것을 볼수 있다

<실습1> → 프렌드 함수 만들기

```cpp
#include<iostream>
using namespace std;
class Rect;
bool equals(Rect r, Rect s);
class Rect {
int width, height;
public:
Rect(int width, int height) { this -> width = width; this -> height = height; }
friend bool equals(Rect r, Rect s);
```

```cpp
};
bool equals(Rect r, Rect s) {
if (r.width == s.width && r.height == s.height) return true;
else return false;
}
int main() {
Rect a(3,4), b(4, 5);
if (equals(a, b)) cout << "equal" << endl;
else cout << "not equal" << endl;
}
```

<실습2> → 두 개의 power 객체를 더하는 + 연산자 작성

```cpp
#include <iostream>
using namespace std;
class Power;
Power operator+(Power op2);
class Power {
int kick;
int punch;
```

```cpp
public:
Power(int kick = 0, int punch = 0) {
this->kick = kick; this->punch = punch;
}
void show();
friend Power operator+(Power op2);
};
void Power::show() {
cout << "kick=" << kick << ',' << "punch=" << punch << endl;
}
Power operator+(Power op2) {
Power tmp; // 임시 객체 생성
tmp.kick = this->kick + op2.kick; // kick 더하기
tmp.punch = this->punch + op2.punch; // punch 더하기
return tmp; // 더한 결과 리턴
}
int main() {
Power a(3, 5), b(4, 6), c;
c = a + b; // 파워 객체 + 연산
a.show();
b.show();
c.show();
}
```

→ 문제를 다 해결하지 못함 , 이해가 부족한 듯 보인다. 

<실습3> → 전위 ++연산자 작성

```cpp
#include <iostream>
using namespace std;
class Power {
int kick;
int punch;
public:
Power(int kick = 0, int punch = 0) {
this->kick = kick; this->punch = punch;
}
void show();
Power& operator++ (); // 전위 ++ 연산자 함수 선언
};
void Power::show() {
cout << "kick=" << kick << ',' << "punch=" << punch << endl;
}
Power& Power::operator++() {
kick++;
punch++;
return *this; // 변경된 객체 자신(객체 a)의 참조 리턴
}
int main() {
Power a(3, 5), b;
a.show();
b.show();
b = ++a; // 전위 ++ 연산자 사용
a.show();
b.show();
}
```

<실습4> → 2+a 를 위한 + 연산자 함수를 프렌드로 작성
#include <iostream>
using namespace std;
class Power {
   int kick;
   int punch;
public:
   Power(int kick = 0, int punch = 0) {
      this->kick = kick; this->punch = punch;
   }
   void show();
   Power operator+(Power op1, Power op2);
   friend Power operator+(int op1, Power op2); // 프렌드 선언
   
};
void Power::show() {
   cout << "kick=" << kick << ',' << "punch=" << punch << endl;
}
Power Power::operator+(Power op1,Power op2) {
   Power tmp;
   tmp.kick = op1 + op2.kick;
   tmp.punch = op1 + op2.punch;
   return tmp;
}
Power operator+(int op1, Power op2) {
   Power tmp; // 임시 객체 생성
   tmp.kick = op1.kick + op2.kick; // kick 더하기
   tmp.punch = op1.punch + op2.punch; // punch 더하기
   return tmp; // 임시 객체 리턴
}
int main() {
   Power a(3, 5), b(4, 6), c;
   c = a + b; // 파워 객체 + 연산
   a.show();
   b.show();
   c.show();
}
-> 구현이 되지 않음, 이해를 할 수 없었음

#include <iostream>
using namespace std;
class Power {
   int kick;
   int punch;
public:
   Power(int kick = 0, int punch = 0) {
      this->kick = kick; this->punch = punch;
   }
   void show();
   friend Power operator+(Power op1, Power op2);
   friend Power operator+(int op1, Power op2); // 프렌드 선언
   
};
void Power::show() {
   cout << "kick=" << kick << ',' << "punch=" << punch << endl;
}
Power operator+(Power op1,Power op2) {
   Power tmp;
   tmp.kick = op1.kick + op2.kick+1;
   tmp.punch = op1.punch + op2.punch+1;
   return tmp;
}
Power operator+(int op1, Power op2) {
   Power tmp; // 임시 객체 생성
   tmp.kick = op1 + op2.kick; // kick 더하기
   tmp.punch = op1 + op2.punch; // punch 더하기
   return tmp; // 임시 객체 리턴
}
int main() {
   Power a(3, 5), b(4, 6), c;
   c = a + b; // 파워 객체 + 연산
   a.show();
   b.show();
   c.show();
}
-> 프렌드로 두가지 버전에 연산자 중복 생성시 첫번째것으로 됨
