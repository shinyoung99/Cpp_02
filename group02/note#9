# 객체지향 정리노트 13주차

<질문>

출력스트림 버퍼에 대해서 자세히 모르겠어서 참고문헌 올립니다.

C++에서 출력 스트림 버퍼는 데이터를 출력하는 데 사용되는 임시 저장 공간입니다. 출력 연산은 실제로 파일이나 화면에 데이터를 쓰는 것이 아니라, 먼저 출력 스트림 버퍼에 데이터를 쓰고, 
나중에 이를 실제 대상에 플러시(flush)하여 출력을 수행합니다.
이렇게 하는 이유는 효율성과 성능 향상 때문입니다.

출력 스트림은 `ostream` 클래스를 기반으로 하며, `ostream` 클래스에는 출력 스트림 버퍼를 다루기 위한 여러 멤버 함수가 있습니다. 
가장 일반적으로 사용되는 것은 `flush()` 함수입니다. `flush()` 함수는 출력 스트림 버퍼의 내용을 실제 출력 대상(예: 파일 또는 콘솔)에 쓰도록 강제합니다.

출력 스트림은 보통 버퍼링을 사용하여 성능을 향상시키기 위해 여러 문자를 한 번에 출력 대상에 쓸 수 있습니다.
그러나 때로는 버퍼의 내용을 즉시 출력하고 싶을 때가 있습니다. 이런 경우에 `flush()` 함수를 사용하여 출력 스트림 버퍼를 플러시할 수 있습니다.

또한, `std::endl`도 줄 바꿈 문자를 출력하면서 동시에 출력 스트림을 플러시합니다. 아래는 `std::endl`을 사용한 예제입니다:

이렇게 하면 줄 바꿈과 함께 출력 스트림이 플러시되므로 즉시 화면에 "Hello, "가 출력되고 그 후에 "world!"가 출력됩니다.

<정리>

키 입력 스트림의 버퍼 → 입력장치로부터 입력된 데이터를 프로그램으로 전달하기 전에 일시 저장

출력 스트림 버퍼 → 프로그램에서 출력된 데이터를 출력 장치로 보내기 전에 일시 저장

입출력 2가지

1. 스트림 입출력 방식
2. 저 수준 입출력 방식 → 키가 입력되는 즉시 프로그램에게 키 값 전달

cin, cout, cerr, clog

<실습1>
#include<iostream>
using namespace std;
int main() {
cout.put('H');
cout.put('i');
cout.put(33);
cout.put('\n');

cout.put('C').put('+').put('+').put(' ');
char str[] = "Ilove programming";
cout.write(str, 6);

# }
코드를 보면 put으로 출력하면서 \n으로 줄내림을 하는 모습이고 33 은 아스키 코드에서 !를 나타내므로 !가 출력된다 put()는 연결하여 C++를 출력하였고 배열로 만들어서 출력하는 모습이다

#include<iostream>
using namespace std;
int main() {
int ch;
while ((ch = cin.get()) != EOF) { // EOF 는 -1
cout.put(ch); // 읽은 문자 출력
if (ch == '\n')
break; // <Enter> 키가 입력되면 읽기 중단
}

# }
이코드는 엔터를 치기전까지 문자를 받고 엔터를 치게되면 그칠떄의 문자열을 출력하는 코드이다

#include<iostream>
using namespace std;
int main() {
char ch;
while (true) {
cin.get(ch); // 입력된 키를 ch에 저장하여 리턴
if (cin.eof()) break; // EOF를 만나면 읽기 종료
cout.put(ch); // ch의 문자 출력
if (ch == '\n')
break; // <Enter> 키가 입력되면 읽기 중단
}

# }

#include<iostream>
using namespace std;
void get1() {
cout << "cin.get으로 엔터키까지 입력 받고 출력합니다>>";
int ch;
while (ch = cin.get() != EOF) {
cout.put(ch);
if (ch == '\n') {
break;
}
}
}
void get2() {
cout << "cin.get(char&)로 <Enter> 키까지 입력 받고 출력합니다>>";
char ch;
while (true) {
cin.get(ch);
if (cin.eof()) break;
cout.put(ch);
if (ch == '\n')
break;
}
}
int main() {
get1(); // cin.get()을 이용하는 사례
get2(); // cin.get(char&)을 이용하는 사례

# }
이코드는 eof와 엔터를 만나면 출력하고 멈추게 된다 하지만 코드를 잘못짰는지 반복문을 빠져나오지 못한다
A.중간에 while (ch = cin.get() != EOF) 여기서 while ((ch = cin.get()) != EOF) 조건이 잘못되어서 무한루프를 돌았다 수정이후는 잘된다

#include<iostream>
using namespace std;

int main() {
char line[80];
cout << "cin.getline() 함수로 라인을 읽습니다." << endl;
cout << "exit를 입력하면 루프가 끝납니다." << endl;

int no = 1; // 라인 번호
while (true) {
cout << "라인 " << no << " >> ";
cin.getline(line, 80); // 79개까지의 문자 읽음
if (strcmp(line, "exit") == 0)
break;
cout << "echo --> ";;
cout << line << endl; // 읽은 라인을 화면에 출력
no++; // 라인 번호 증가
}
}

# 이코드는 getline()을 사용하여 문자를 출력하는 코드인데 get()으로 출력을 하다보면 \n이 스트림버퍼에 남아 무한루프를 초래하게 되지만 getline()코드는 \n을 스트림버퍼에 남기지 않아 무한루프에 들어갈 염려없이 진행이가능하다

포멧 플래그 세팅 함수
cout.unsetf(ios::dec); // 10진수 해제
cout.setf(ios::hex); // 16진수로 설정
cout << 30 << endl; // 1e가 출력됨

# cout.setf(ios::dec | ios::showpoint); // 10진수 표현과 동시에 실수에
// 소숫점이하 나머지는 0으로 출력
cout << 23.5 << endl; // 23.5000으로 출력

#include <iostream>
using namespace std;

void showWidth() {
cout.width(10); // 다음에 출력되는 "hello"를 10 칸으로 지정
cout << "Hello" << endl;
cout.width(5); // 다음에 출력되는 정수 12를 5 칸으로 지정
cout << 12 << endl;

cout << '%';
cout.width(10); // 다음에 출력되는 "Korea/"만 10 칸으로 지정
cout << "Korea/" << "Seoul/" << "City" << endl;
}

int main() {
showWidth();
cout << endl;

cout.fill('^');
showWidth();
cout << endl;

# cout.precision(5);
cout << 11. / 3. << endl;
}
width은 띄여쓰기를 하거나 위치하고싶은곳에 위치하게 만드는 함수이ㅗ fill은 빈칸을 ()안에 문자로 채워주는 함수이다 precision은 출력되는 문자 수는 제한하는 함수이다

#include <iostream>
using namespace std;
class Point { // 한 점을 표현하는 클래스
int x, y; // private 멤버
public:
Point(int x = 0, int y = 0) {
this->x = x;
this->y = y;
}
friend ostream& operator << (ostream& stream, Point a);
};
ostream& operator << (ostream& stream, Point a) {
stream << "(" << a.x << "," << a.y << ")";
return stream;
}

int main() {
Point p(3, 4); // Point 객체 생성
cout << p << endl; // Point 객체 화면 출력

Point q(1, 100), r(2, 200); // Point 객체 생성
cout << q << r << endl; // Point 객체들 연속하여 화면 출력

# }
이코드를 보면 원래는 cout << p << endl; 라는 수식이 성립이 안되기 때문에 클래스에 프렌드로 외부 함수 참조를 통하여 클래스 내부 맴버 접근을 허용하고 연산자 함수를 추가하여서 클래스에 객체를 생성해서 그안에 x,y 값을 출력하는 코드로 보면 된다.

#include <iostream>
using namespace std;
class Point { // 한 점을 표현하는 클래스
int x, y; // private 멤버
public:
Point(int x = 0, int y = 0) {
this->x = x;
this->y = y;
}
friend ostream& operator << (ostream& stream, Point a);
friend istream& operator >> (istream& stream, Point &a);
};
istream& operator >> (istream& ins, Point& a) {
cout << "x좌표>>";
ins >> a.x;
cout << "y좌표>>";
ins >> a.y;
return ins;
}
ostream& operator << (ostream& stream, Point a) {
stream << "(" << a.x << "," << a.y << ")";
return stream;
}

int main() {
Point p; // Point 객체 생성
cin >> p;  // >> 연산자 호출하여 x 좌표와 y 좌표를 키보드로 읽어 객체 p 완성
cout << p;  // << 연산자 호출하여 객체 p 출력

# }이코드는 마찬가지로 객체에 입력받는 것을 기본수식으로 없기떄문에 따로 만들어준것인데 전 코드랑 같은점은 프렌드로 선언하고 맴버에 접근한 것이고 >>연산자 중복을 사용하여 객체 주소로 받아 각각입력해주고 입력값은 전에 만든 출력으로 객체를 출력해준다

#include <iostream>
using namespace std;
istream& question(istream& ins) {
cout << "거울아 거울아 누가 제일 예쁘니 ? ";
return ins;
}

# int main() {
string answer;
cin >> question >> answer;
cout << "세상에서 제일 예쁜 사람은 " << answer << "입니다." << endl;
}
이코드는 사용자 조작자를 통해 question이라는 조작자를 만들어서 스트링을 출력하게 만드는 모습입니다

<질문>

<정리>

키 입력 스트림의 버퍼 → 입력장치로부터 입력된 데이터를 프로그램으로 전달하기 전에 일시 저장

출력 스트림 버터 → 프로그램에서 출력된 데이터를 출력 장치로 보내기 전에 일시 저장

입출력 2가지

1. 스트림 입출력 방식
2. 저 수준 입출력 방식 → 키가 입력되는 즉시 프로그램에게 키 값 전달 

cin, cout, cerr, clog

<실습1>
