# 객제지향 정리노트 10주차

박찬윤, 안신영

<정리>

클래스 사이에서의 상속관계를 정리함

기본 → 상속해주는 클래스

파생 → 상속받는 클래스 

상속 받는 것은 객체에서 제일 중요한 개념이다.

업캐스팅 중요!!!!!

다운캐스팅을 하면 기본 클래스에서 변수 x, y 프라이빗이면 접근 불가능

포인터가 어떻게 치환되는지 확인필요하기 !!!!!

<질문>

객체지향에서의 상속은 무엇인가? → 인터넷 참조

객체지향 프로그래밍(OOP)에서 상속은 중요한 개념 중 하나로, 한 클래스가 다른 클래스의 특성과 동작을 재사용하거나 확장하는 메커니즘을 제공합니다. 이를 통해 코드 재사용성과 계층 구조를 만들 수 있으며, 객체 간의 관계를 나타내고 프로그램의 설계와 구현을 개선하는 데 도움이 됩니다.

상속은 다음과 같은 주요 개념을 포함합니다:

1. 슈퍼클래스(부모 클래스)와 서브클래스(자식 클래스): 상속 관계에서 슈퍼클래스는 특성과 동작을 제공하는 클래스이며, 서브클래스는 슈퍼클래스로부터 상속받아 새로운 특성을 추가하거나 기존 특성을 재정의할 수 있는 클래스입니다.
2. 재사용성: 상속을 통해 서브클래스는 슈퍼클래스의 멤버 변수(속성)와 메서드(동작)를 상속받으므로 중복 코드를 방지하고 코드를 재사용할 수 있습니다.
3. 메서드 오버라이딩: 서브클래스는 슈퍼클래스에서 상속받은 메서드를 필요에 맞게 다시 정의(오버라이딩)할 수 있습니다. 이를 통해 서브클래스는 슈퍼클래스의 메서드를 수정하거나 확장할 수 있습니다.
4. is-a 관계: 상속은 "is-a" 관계를 나타냅니다. 예를 들어, 만약 슈퍼클래스가 "동물"이라면, 서브클래스로 "고양이"나 "개"를 생성할 수 있으며 "고양이는 동물이다"와 같이 서브클래스는 슈퍼클래스의 특성을 가집니다.
5. 다중 상속: 일부 객체지향 언어에서는 하나 이상의 슈퍼클래스로부터 상속을 받을 수 있습니다. 이를 다중 상속이라고 합니다. 다중 상속은 여러 슈퍼클래스로부터 특성을 상속받을 수 있지만 복잡성을 증가시킬 수 있으므로 신중하게 다루어져야 합니다.

상속은 객체지향 소프트웨어 개발에서 코드 재사용과 추상화를 지원하여 프로그램의 유지보수성을 향상시키고 구조화된 소프트웨어를 만드는 데 도움을 줍니다.

업캐스팅이랑 상속과의 차이는 무엇일까?

업캐스팅(upcasting)은 객체지향 프로그래밍에서 다형성(polymorphism)과 관련된 중요한 개념 중 하나입니다. 이것은 서브클래스(자식 클래스) 객체를 슈퍼클래스(부모 클래스) 타입으로 형변환하는 과정을 가리킵니다. 업캐스팅을 통해 서브클래스 객체를 슈퍼클래스의 참조 변수에 할당할 수 있습니다.

다음은 업캐스팅의 주요 특징과 목적입니다:

1. 서브클래스 객체를 슈퍼클래스 참조 변수에 할당: 업캐스팅은 슈퍼클래스와 서브클래스 사이의 계층 구조에서 서브클래스 객체를 슈퍼클래스의 참조 변수로 참조할 수 있도록 합니다. 이것은 슈퍼클래스와 서브클래스 사이의 "is-a" 관계를 반영합니다.
2. 다형성 지원: 업캐스팅은 다형성의 중요한 측면 중 하나입니다. 슈퍼클래스의 참조 변수를 사용하여 서브클래스 객체의 다양한 형태의 메서드를 호출할 수 있습니다. 이것은 런타임에 객체의 실제 형태에 따라 해당하는 메서드가 호출되는 다형성을 지원합니다.
3. 메서드 오버라이딩: 업캐스팅을 사용하면 슈퍼클래스와 서브클래스 간의 메서드 오버라이딩을 통해 서브클래스에서 슈퍼클래스의 메서드를 재정의할 수 있습니다. 업캐스팅된 객체가 실제로 어떤 서브클래스인지에 따라 호출되는 메서드가 달라집니다.

업캐스팅의 예시:

```java
class Animal {
    void makeSound() {
        System.out.println("Animal makes a sound");
    }
}

class Dog extends Animal {
    @Override
    void makeSound() {
        System.out.println("Dog barks");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal animal = new Dog(); // 업캐스팅
        animal.makeSound(); // 다형성에 따라 Dog 클래스의 makeSound() 메서드가 호출됨
    }
}

```

위의 예제에서 `Dog` 클래스는 `Animal` 클래스의 서브클래스이며, `Dog` 객체를 `Animal` 참조 변수에 할당하여 업캐스팅을 수행했습니다. 결과적으로 `animal.makeSound()`를 호출할 때 `Dog` 클래스의 `makeSound()` 메서드가 호출되어 "Dog barks"가 출력됩니다.

포인터란 정확히 무엇일까?

포인터(pointer)는 컴퓨터 프로그래밍에서 메모리 주소를 저장하고 참조하는 데 사용되는 데이터 형식이나 변수입니다. 포인터는 주로 저수준 프로그래밍 언어인 C, C++ 및 어셈블리 언어에서 사용되며, 메모리 관리와 데이터 구조 등의 작업에서 중요한 역할을 합니다. 포인터는 다음과 같은 주요 특징을 갖습니다:

1. 메모리 주소 저장: 포인터는 변수의 메모리 주소를 저장하는 데 사용됩니다. 따라서 변수의 위치나 값이 아니라 해당 변수가 저장된 메모리 위치를 가리킵니다.
2. 간접 참조: 포인터를 사용하면 메모리 주소를 통해 실제 데이터를 읽고 쓸 수 있습니다. 이를 "간접 참조" 또는 "역참조"라고 합니다.
3. 동적 메모리 할당: 포인터는 동적 메모리 할당을 위해 중요합니다. 동적으로 메모리를 할당하고 해제할 때 포인터를 사용하여 메모리를 관리합니다.
4. 배열과 문자열 처리: 포인터는 배열과 문자열 처리에서 유용하게 사용됩니다. C 언어에서 배열은 포인터로도 처리될 수 있으며, 문자열은 포인터를 사용하여 문자를 처리합니다.
5. 함수 포인터: 함수 포인터를 사용하여 함수를 가리킬 수 있으며, 이것은 콜백 함수나 동적 함수 호출과 같은 작업에서 유용합니다.

포인터를 잘 다루려면 주의가 필요하며, 잘못 사용할 경우 메모리 오류나 다른 버그를 발생시킬 수 있습니다. 따라서 포인터를 사용할 때 메모리 누수와 다른 안정성 문제를 방지하기 위해 주의깊게 처리해야 합니다.

C++ 및 C#과 같은 언어는 포인터를 추상화하고 보안을 강화하는 방법을 제공합니다. C#은 포인터를 사용하는 대신에 참조 형식을 사용하고, C++은 스마트 포인터와 레퍼런스를 도입하여 포인터 관련 문제를 해결합니다.

<실습1>

#include<iostream>
using namespace std;
class Person {
int talking();
int eating();
int   walking();
int sleeping();

};
class Student :public Person {
int study();
};
class Researcher :public Person {
int leaning();
};
class StudyWorker : public Student {
int working();
};
class Professor : public Researcher {
int teaching();
};

<실습2>

#include<iostream>
#include<string>
using namespace std;
class Point {
int x, y; //한 점 (x,y) 좌표값
public:
void set(int x, int y) { this->x = x; this->y = y; }
void showPoint() {
cout << "(" << x << "," << y << ")" << endl;
}
};
class ColorPoint :public Point {
string color;
public:
void setColor(string color) { this->color = color; }
void showColorPoint();
};
void ColorPoint::showColorPoint() {
cout << color << ",";
showPoint();
}

int main() {
Point p; // 기본 클래스의 객체 생성
ColorPoint cp; // 파생 클래스의 객체 생성
cp.set(3, 4); // 기본 클래스의 멤버 호출
cp.setColor("Red"); // 파생 클래스의 멤버 호출
cp.showColorPoint(); // 파생 클래스의 멤버 호출

}

→ 상속한 함수 사용에서 구현하는 부분에서 어려움을 많이 느꼈다.

<실습3> → 1~7번까지 오류 설명하기 

3, 4번포인터에서 프라이빗으로 직접 접근이 안되고 멤버 함수로만 접근이 가능하다.

5, 6번 파생된 클래스에서 부모 클래스인 포인트에서 프라이빗으로 선언된 x, y를 직접 값을 넣으려고 하니까 직접 접근이 안된다. 

#include <iostream>
#include <string>
using namespace std;
class Point {
protected:
int x, y; //한 점 (x,y) 좌표값
public:
void set(int x, int y);
void showPoint();
};
void Point::set(int x, int y) {
this->x = x;
this->y = y;
}
void Point::showPoint() {
cout << "(" << x << "," << y << ")" << endl;
}
class ColorPoint : public Point {
string color;
public:
void setColor(string color);
void showColorPoint();
bool equals(ColorPoint p);
};
void ColorPoint::setColor(string color) {
this->color = color;
}
void ColorPoint::showColorPoint() {
cout << color << ":";
showPoint(); // Point 클래스의 showPoint() 호출
}
bool ColorPoint::equals(ColorPoint p) {
if (x == p.x && y == p.y && color == p.color) // ①
return true;
else
return false;
}
int main() {
Point p; // 기본 클래스의 객체 생성
p.set(2, 3); // ②
p.x = 5; // ③
p.y = 5; // ④
p.showPoint();
ColorPoint cp; // 파생 클래스의 객체 생성
cp.x = 10; // ⑤
cp.y = 10; // ⑥
cp.set(3, 4);
cp.setColor("Red");
cp.showColorPoint();
ColorPoint cp2;
cp2.set(3, 4);
cp2.setColor("Red");
cout << ((cp.equals(cp2)) ? "true" : "false");
}

<실습4> → 6번빼고 전부 다 오류발생

1, 2번 각각 프라이빗과 프로텍트에서 외부에서 호출불가능

3번 호출이 가능하지만 클래스가 베이스 프라이빗으로 상속해서 모든 인자들이 프라이빗으로 변경되어서 오류가 발생

4번 클래스 함수에서 프라이빗으로 선언되어서 외부에서 수정 불가능 컴파일 오류

5번 프로텍트는 외부에서 접근 불가능이 되기 떄문에 컴파일 오류

#include <iostream>
using namespace std;
class Base {
int a;
protected:
void setA(int a) { this->a = a; }
public:
void showA() { cout << a; }
};
class Derived : private Base {
int b;
protected:
void setB(int b) { this->b = b; }
public:
void showB() { cout << b; }
};
int main() {
Derived x;
x.a = 5; // ①
x.setA(10); // ②
x.showA(); // ③
x.b = 10; // ④
x.setB(10); // ⑤
x.showB(); // ⑥
}

<실습5>

컴파일 오류가 3, 4에서 난다.

3,4번을 빼고 상속을 하기 때문에 컴파일 오류가 난다. 

#include <iostream>
using namespace std;
class Base {
int a;
protected:
void setA(int a) { this->a = a; }
public:
void showA() { cout << a; }
};
class Derived : private Base {
int b;
protected:
void setB(int b) { this->b = b; }
public:
void showB() {
setA(5); // ①
showA(); // ②
cout << b;
}
};
class GrandDerived : private Derived {
int c;
protected:
void setAB(int x) {
setA(x); // ③
showA(); // ④
setB(x); // ⑤
}
};
