# 객체지향 정리노트 12주차

박찬윤, 안신영

<질문>

템플릿은 호출을 못하는 것인가?

템플릿 선언 자체는 호출이 아니라 템플릿을 정의하고 있습니다. 템플릿은 일종의 틀을 제공하며, 실제로 어떤 타입에 대해 사용될 때 해당 틀이 채워져서 코드가 생성됩니다. 따라서 템플릿을 선언하고 있다고 해서 그 자체로 호출되는 것은 아닙니다.

템플릿을 사용하기 위해서는 해당 템플릿에 대한 구체적인 타입을 명시하여야한다. 

일반함수를 제너릭 함수로 변경하는 것? 

template <class T>
void myswap(T& a, T& b) {
T temp;
temp = a;
a = b;
b = temp;
} 

이 부분을 만들어 내는 것→ 구체화된 함수를 보고 제네릭을 만들기 가능

vector 컨테이너에서 using namespace std; → 필수인가

#include <vector>

int main() {
std::vector<int> myVector;
// 사용 코드...
return 0;
}

→ 이 방법이 더 효율적이라고 알려줌 

<정리>

제네릭 또는 일반화 → 함수나 클래스를 일반화시키고, 매개변수 타입을 지정 찍어내듯  코드를 생산

템플릿  → template < class T> → 선언은 하지만 호출을 안한다?

제네릭 타입은 동일해야 사용가능하다. → 컴파일 오류 

템플릿 장점 : 코드 재사용이 좋지만, 가독성이 좋지않다.(사람마다 다름)

단점: 컴파일 오류 메시지 빈약, 디버깅에 많은 어려움

제네릭 프로그래밍은 → 제네릭 함수나 클래스를 활용, C++에서 STL 제공 활용

큰 값을 리턴하는 bigger()함수 

배열 복사하는 제네릭 함수는 mcopy() 

제네릭 클래스 만들 때 타입을 정확히 기입하기

vector 컨테이너 → 가변 길이 배열을 구현한 제네릭 클래스 

→ 생성할 때 유의할 점: 벡터 벡터 쓸 수 없음, 클래스 타입이나, 포인트 형태로 선언을 해줘야한다. 

map 컨테이너 → 키로 검색 #include <map> 사용

알고리즘 함수 중 템플릿 함수, 전역함수(멤버 함수가 아님)

<실습1> → 제너릭 함수 변환

#include <iostream>
using namespace std;
class Circle {
int radius;
public:
Circle(int radius = 1) { this->radius = radius; }
int getRadius() { return radius; }
};
template <class T>
void myswap(T& a, T& b) {
T temp;
temp = a;
a = b;
b = temp;
}

int main() {
int a = 4, b = 5;
myswap(a, b);
cout << "a=" << a << ", " << "b=" << b << endl;
double c = 0.3, d = 12.5;
myswap(c, d);
cout << "c=" << c << ", " << "d=" << d << endl;
Circle donut(5), pizza(20);
myswap(donut, pizza);
cout << "donut반지름=" << donut.getRadius() << ", ";
cout << "pizza반지름=" << pizza.getRadius() << endl;
}

<실습2> → bigger()만들기

#include <iostream>
using namespace std;
template <class T>
T bigger(T a, T b) {
if (a > b)
return a;
else if (b > a)
return b;
}
int main() {
int a = 20, b = 50;
char c = 'a', d = 'z';
cout << "bigger(20, 50)의 결과는 " << bigger(a, b) << endl;
cout << "bigger('a', 'z')의 결과는 " << bigger(c, d) << endl;
}

<실습3> → add()함수 만들기

#include <iostream>
using namespace std;
template <class T>
T add(T a[],int b){
T sum=0;
for (int i = 0; i < b; i++) {
sum += a[i];
}return sum;
}
int main() {
int x[] = { 1,2,3,4,5 };
double d[] = { 1.2, 2.3, 3.4, 4.5, 5.6, 6.7 };
cout << "sum of x[] = " << add(x, 5) << endl; // 배열 x와 원소 5개의 합을 계산
cout << "sum of d[] = " << add(d, 6) << endl; // 배열 d와 원소 6개의 합을 계산
}

<실습4> → mcopy() 함수 만들기 

#include <iostream>
using namespace std;
template <class T,class T2>
void mcopy(T src[],T2 dest[],int n){
for (int i = 0; i < n; i++)
dest[i] = (T2)src[i];
}
int main() {
int x[] = { 1,2,3,4,5 };
double d[5];
char c[5] = { 'H', 'e', 'l', 'l', 'o' }, e[5];
mcopy(x, d, 5); // int x[]의 원소 5개를 double d[]에 복사
mcopy(c, e, 5); // char c[]의 원소 5개를 char e[]에 복사
for (int i = 0; i < 5; i++) cout << d[i] << ' '; // d[] 출력
cout << endl;
for (int i = 0; i < 5; i++) cout << e[i] << ' '; // e[] 출력
cout << endl;
}

<실습5> →제네릭 스택 클래스 만들기 

#include <iostream>
using namespace std;
template<class T>
class MyStack{
int tos;// top of stack
T data[100]; // T 타입의 배열. 스택의 크기는 100
public:
MyStack();
void push(T element); // element를 data [] 배열에 삽입
T pop(); // 스택의 탑에 있는 데이터를 data[] 배열에서 리턴
};
template<class T>
MyStack<T>::MyStack() { // 생성자
tos = -1; // 스택은 비어 있음
}
template <class T>
void push(T element)
{
if (tos == 99) {
cout << "stack full";
return;
}
tos++;
data[tos] = element;
}
template<class T>
T MyStack<T>::pop() {
T retData;
if (tos == -1) {
cout << "stack empty";
return 0; // 오류 표시
}
retData = data[tos--];
return retData;
}
int main() {
MyStack<int>iStack; // int 만 저장하는 스택
iStack.push(3);
cout << iStack.pop() << endl;
MyStack<double>dStack;// double 만 저장하는 스택
dStack.push(3.5);
cout << dStack.pop() << endl;
MyStack<char> // char만 저장하는 스택
p->push('a');
cout << p->pop() << endl;
delete p;
}

<실습6> → 두 개의 제네릭 타입을 가진 클래스 만들기

#include <iostream>
using namespace std;
template <class T1, class T2>// 두 개의 제네릭 타입 선언
class GClass {
T1 data1;
T2 data2;
public:
GClass();
void set(T1 a, T2 b);
void get(T1& a, T2& b);
};
template <class T1,class T2>
GClass<T1,T2>::GClass()
{
data1 = 0; data2 = 0;
}
template<class T1, class T2>
void GClass<T1,T2>::set(T1 a, T2 b) {
data1 = a; data2 = b;
}
template<class T1,class T2>
void GClass<T1,T2>::get(T1 &a,T2 &b){
a = data1; b = data2;
}
int main() {
int a;
double b;
GClass<int, double> x;
x.set(2, 0.5);
x.get(a, b);
cout << "a=" << a << '\t' << "b=" << b << endl;
char c;
float d;
GClass<char, float> y;
y.set('m', 12.5);
y.get(c, d);
cout << "c=" << c << '\t' << "d=" << d << endl;
}

<실습7> → vector 컨테이너 활용

#include<iostream>
#include<vector>
using namespace std;
int main() {
vector<int> v;
v.push_back(1);
v.push_back(2);
v.push_back(3);
for (int i = 0; i < v.size(); i++)
cout << v[i]<<" ";
cout << endl;
v[0] = 10;
int n = v[2];
[v.at](http://v.at/)(2) = 5;
for (int i = 0; i < v.size(); i++)
cout << v[i]<< " ";
cout << endl;
}

<실습8> → iterator를 사용하여 vector의 모든 원소에 2곱하기

#include<iostream>
#include<vector>
using namespace std;
int main() {
vector<int> v; // 정수 벡터 생성
v.push_back(1);
v.push_back(2);
v.push_back(3);
vector<int>::iterator it;// 벡터 v의 원소에 대한 포인터 it 선언
for (it = v.begin(); it!=v.end(); it++) {// iterator를 이용하여 모든 원소 탐색
int n = *it;// it가 가리키는 원소 값 리턴
n = n * 2;// 곱하기 2
*it = n;// it가 가리키는 원소에 값 쓰기
}
for (it = v.begin(); it != v.end(); it++) // 벡터 v의 모든 원소 출력
cout << *it << ' ';
cout << endl;

}
