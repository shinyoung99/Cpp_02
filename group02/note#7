# 객체지향 정리노트 11주차

#include <iostream>
using namespace std;
class Base {
public:
void f() { cout << "Base::f() called" << endl; }
};
class Derived : public Base {
public:
void f() { cout << "Derived::f() called" << endl; }
};

# void main() {
Derived d, * pDer;
pDer = &d;
pDer->f(); // Derived::f() 호출
Base* pBase;
pBase = pDer; // 업캐스팅
pBase->f(); // Base::f() 호출
}
함수 재정의 코드
포인터를 통하여 주소값을 가리키는 함수를 출력하게된다
오버라이딩은과 함수 재정의 둘의 차이점은 어떤게 있을까?
오버라이딩은 가상함수와 virtual 키워드를 사용하여 기존 베이스 함수와 파생된 함수가 있다면 베이스함수의 존재감을 상실 시키고 항상 파생함수만 출력 되지만 함수 재정의는 베이스함수와 파생함수 둘다 동등한 호출 기회를 가지게 된다

# #include <iostream>
using namespace std;
class Base {
public:
virtual void f() { cout << "Base::f() called" << endl; }
};
class Derived : public Base {
public:
virtual void f() { cout << "Derived::f() called" << endl; }
};
int main() {
Derived d, *pDer;
pDer = &d;
pDer->f(); // Derived::f() 호출
Base * pBase;
pBase = pDer; // 업 캐스팅
pBase->f(); // 동적 바인딩 발생!! Derived::f() 실행
}
가상 함수를 재정의하는 오버라이딩의 경우 함수가 호출되는 실행 시간에 동적 바인딩
이 일어나지만, 그렇지 않은 경우 컴파일 시간에 결정된 함수가 단순히 호출된다(정적
바인딩). 오버라이딩은 virtual키워드를 통해 결졍되고 오버라이딩이 발생하게되면 베이스 함수는
존재감을 잃어 동적바인드가 실행시간에 일어나 파생함수를 출력하게 된다
오버라이딩의 성공 조건
◼ 가상 함수 이름, 매개 변수 타입과 개수, 리턴 타입이 모두 일치해야한다.
virtual 키워드는 베이스 클래스에 선언 오버라이딩 조건 만족시 생략 가능

#include<iostream>
using namespace std;

class Base {
public:
virtual void f() { cout << "Base::f() called" << endl; }
};
class Derived : public Base {
public:
void f() { cout << "Derived::f() called" << endl; }
};
class GrandDerived : public Derived {
public:
void f() { cout << "GrandDerived::f() called" << endl; }
};
int main() {
GrandDerived g;
Base* bp;
Derived* dp;
GrandDerived* gp;
bp = dp = gp = &g;
bp->f();
dp->f();
gp->f();

# }
이코드는 상속을 재상속 했을경우 동적바인드가 어떻게 동작할것인가를 확인하는 코드입니다
먼저 오버라이딩의 조건을 전부 만족하는 3개의 클래스가 있고
메인에서 객체를 생성하고 각각의 포인터를 만들어서 객체 g의 주소를 가르키게한후 함수를 호출하는 모습인데
먼저 bp의 경우 base의 f함수를 호출하지만 동적바인드가 일어나 GranDerived의 f를 호출하게되고
dp의 경우 Derived의 f함수를 호출하지만 동적바인드가 일어나GrandDerived의 f함수를 호출하게됩니다
gp는 GrndDerived의 f함수를 호출해 출력되는 값이 전부 GrandDerived의 f함수를 3개 출력하게 됩니다.
이로써 오버라이딩은 파생함수 중에서도 가장 마지막파생함수를 오버라이딩하게 된다는것을 알게되었습니다.

# 가상소멸자란 무엇일까?
가상소멸자란 virtual키워드가 붙은 오버라이딩의 조건이 맞는 소멸자를 말하는데
호출순서는
class Base {
public:
virtual ~Base();
};
class Derived: public Base {
public:
virtual ~Derived();
};
int main() {
Base *p = new Derived();
delete p;
}
 ~Base() 소멸자 호출
 ~Derived() 실행
 ~Base() 실행
이순으로 실행된다

# #include <iostream>
using namespace std;
class Base {
public:
virtual ~Base() { cout << "~Base()" << endl; }
};
class Derived: public Base {
public:
virtual ~Derived() { cout << "~Derived()" << endl; }
};
int main() {
Derived *dp = new Derived();
Base *bp = new Derived();
delete dp; // Derived의 포인터로 소멸
delete bp; // Base의 포인터로 소멸
}
가상소멸자는 파생클래스를 호출해도 오버라이딩되어서 동적바인드가 일어나 베이스 클래스의 소멸자까지 호출되어 소멸된다

# #include <iostream>
#include "Shape.h"
#include "Circle.h"
#include "Rect.h"
#include "Line.h"
using namespace std;
int main() {
Shape* pStart = NULL;
Shape* pLast;
pStart = new Circle(); // 처음에 원 도형을 생성한다.
pLast = pStart;
pLast = pLast->add(new Rect()); // 사각형 객체 생성
pLast = pLast->add(new Circle()); // 원 객체 생성
pLast = pLast->add(new Line()); // 선 객체 생성
pLast = pLast->add(new Rect()); // 사각형 객체 생성
// 현재 연결된 모든 도형을 화면에 그린다.
Shape* p = pStart;
while (p != NULL) {
p->paint();
p = p->getNext();
}
// 현재 연결된 모든 도형을 삭제한다.
p = pStart;
while (p != NULL) {
Shape* q = p->getNext(); // 다음 도형 주소 기억
delete p; // 기본 클래스의 가상 소멸자 호출
p = q; // 다음 도형 주소를 p에 저장
}
}
링크드 리스트를 작성하는 코드이고 오버라이드를 이용하여 객체마다 같은 이름의 함수를 출력할수있는 코드를 만들고 객체를 소멸한다

순수 가상함수
기본클래스의 가상함수의 목적이 실행이 아닌 재정의 함수를 알려주는 역할을 함을 알려주는 함수
선언만 있다
class Shape {
public:
virtual void draw()=0; // 순수 가상 함수 선언
};
이런식으로 작성한다
추상클랜스란 최소 하나의 순수 가상 함수를 가진 클래스
class Shape { // Shape은 추상 클래스
Shape *next;
public:
void paint() {
draw();
}
virtual void draw() = 0; // 순수 가상 함수
};
void Shape::paint() {
draw(); // 순수 가상 함수라도 호출은 할 수 있다.
}
추상클래스는 객체 생성이 불가능 하지만 포인터 선언은 가능하다
추상 클래스의 목적은 상속에서의 기본클래스의 역할을 하기 위함에 있다
추상클래스의 구현은 순수가상 함수를 오버라이딩함으로써 구현가능하고 파생된 클래스는 추상클래스가 아니다
class Shape {

public:
virtual void draw() = 0;
};
class Circle : public Shape {
public:
string toString() { return "Circle 객체"; }
};
Shape shape; // 객체 생성 오류
Circle waffle; // 객체 생성 오류
추상클래스를 단순 상속하게되면 파생클래스도 추상클래스가 되기떄문에 객체생성이 안된다.
class Shape {
public:
virtual void draw() = 0;
};
class Circle : public Shape {
public:
virtual void draw() {
cout << "Circle";
}
string toString() { return "Circle 객체"; }
};
Shape shape; // 객체 생성 오류
Circle waffle; // 정상적인 객체 생성
하지만 추상클래스의 순수가상함수를 오버라이딩하게되면 파생클래스는 객체생성이가능하다
