# Cpp_02

# 객체지향프로그래밍 2주차 정리노트

<박찬윤>

기계어 - 컴퓨터가 진공관으로 시작해서 입력을 먼저하고 켜지것과 꺼지것이 그것을 이용해서 컴퓨터에 0과1을 사용해서 명령을 할 수 있는 언어

어셈블리어 - 기계어는 컴퓨터만 알아 들을 수 있는데 글자가 길어질수록 0과1을 찾는 수가 많아지니까 그것을 보안하기 위해서 사람들이 편하게 쓸 수 있는 어셈블리어를 출력해서 사용

고급언어 - 어셈블리어를 기계어를 직관적으로 번역해서 쓰는 것인데 사람이 쓰는 언어로 명령을 입력하면 자동으로 변환시켜줘서 기계어로 명령을 내릴 수 있다.  

<안신영>

질문 : 왜 컴퓨터가 0과1로 알아 들을 수 있을까?

기계어 - 컴퓨터가 알아 들을 수 있는 언어로 0과1로 되어있다.

질문 : 어셈블리어 라는 것은 정확히 어떤 것일까?

어셈블리어 - 컴퓨터만 알아 들을 수 있는 언어가 길어질 수록 출력하는 것을 기계어로 변환할 수 있다.

고급언어 - 사람들이 이해할 수 있는 언어

<박찬윤>

서로 잘 모름

캡슐화란?

캡슐화 -  **클래스 안에 서로 연관있는 속성과 기능들을 하나의 캡슐(capsule)로 만들어 데이터를 외부로부터 보호하는 것을 말합니다.** 

상속 - 파이썬에서 나오듯이 부모자식 클래스를 상속해서 클래스에서 다른 클래스를 가져와서 사용할 수 있다. 상속을 도입해서 c언어를 쓸  수 있다.

다형성이란? 

<안신영>

서로 잘 모름

캡슐화란?

질문 : 두개의 클래스에서 상속 받아서 사용할 수 있을까?

→찬윤: 답변 상속받을 수 있음 / 신영: 상속 받을 수 없음, 충돌이 일어날 것 같기 때문

상속 - 다른 클래스에서 가져와서 사용할 수 있는 것

다형성 - 다른 함수를 다른 방법으로 동작 할 수 있다.

<필기>

함수 중복 - 다른 동일한 함수들을 선언한다

디폴트 매개 변수 - 예외처리?

참조와 참조 변수 - 변수를 별명으로 설정하여 도입

참조에 의한 호출 - 별명으로 호출

new/delete 연산자

연산자 재정의 - override

제네릭 함수와 클래스

<질문> 캡슐화는 왜 캡슐화라는 이름이 붙었나? 

→ 찬윤: 클래스 안에 있는 프라이빗 함수로 인해서 보호되는 코드들 때문에 캡슐 속에 보호된다라는 느낌때문에 

신영 :  캡슐보다 더 좋은 느낌의 단어가 있을텐데 왜 캡슐화인것인가?라는 의문을 가졌다. 

<박찬윤>

캡슐화 - 보여지는 코드들과 보여지지않는 코드들을 프라이빗이 있는 클래스 안쓰면 그 안에 있는 변수와 변수값을 사용하지 못함

클래스 - 객체를 만드는 도구 → 자체가 객체가 되지않고 그 클래스를 이용해서 객체라는 변수를 만듦

객체 - 클래스에서 완성된 느낌으로 나오는 개인적인 실체, 

<안신영>

캡슐화 - 다른 외부로부터 보호받는 객체

클래스 - 객체를 모아놓은 단체

객체 - 하나의 원소같은 느낌

<필기>

다형성 - 오버로딩, 오버라이딩 

오버로딩 - 키워드는 똑같은 매개변수가 다름, 함수이름은 똑같음, 

오버라이딩 - 동물 (부모클래스)→ 소리내기(속성) → 인스턴스들이 다 다름 → 함수들을 다시 재정의한다.

<안신영>

상속 - 부모와 자식 클래스가 있는데 부모를 받아주는 자식이 있는게 상속

다형성 - 오버로딩, 오버라이딩이 있는데 오버로딩 연산자 재정의하고, 오버라이딩은 함수를 재정의합니다. 

<박찬윤>

상속 - 상속을 해주는 부모 클래스가 있고 클래스를 받는 자식 클래스가 있는데 자식 클래스를 재상속도 가능하다. 

다형성 - 중복되는 코드 사용을 줄여서 효율적으로 메모리 관리를 할 수 있고, 코드를 적는 수고도 덜어주고, 반복을 줄여준다. 

<질문> 다형성 함수를 재정의하는게 과연 정말로 효율적인가? 

→ 찬윤: 무조건 효율적이라고 생각함, 소리를 내는 방법을 똑같이 쓰고 오버라이딩을 사용하면 중복되는 코드 없이 다른 점만 코드를 적어서 실행시키면 되는데 다형성을 사용하지 않으면 힘들다.

신영 :  효율적이라고 생각함, 반복되는 것들을 굳이 다시 코드를 짜지않고 다른 점만 가져와서 쓸 수 있는 효율적인 방법이라고 생각함

<상속성>

- 하나의 클래스가 가진 특징(함수, 데이터)을 다른 클래스가 그대로 물려받는 것
- 이미 작성된 클래스를 받아서 새로운 클래스를 생성하는 것
- 기존 코드를 재활용해서 사용함으로써 객체지향 방법의 중요한 기능 중 하나에 속한다.

<다형성>

- 오버라이딩(Overriding) - 부모클래스의 메소드와 같은 이름을 사용하며 매개변수도 같되 내부 소스를 재정의하는 것
- 오버로딩(Overloading) - 같은 이름의 함수를 여러 개 정의한 후 매개변수를 다르게 하여 같은 이름을 경우에 따라 호출하여 사용하는 것
